Debugging Workflow
To debug your application with VSCode:

Program your FPGA board first:

Use the Command Palette (Ctrl+Shift+P) and run "Tasks: Run Task"
Select either "Program DE1-SoC" or "Program DE10-Lite" depending on your board


Compile your program:

Run the "Compile RISC-V Program" task


Start the GDB server:

Run the "Start GDB Server" task
This will start in the background and wait for connections


Start debugging:

Press F5 or click the Run and Debug icon in VSCode
Select the "RISC-V Debug" configuration


Use VSCode's debug interface:

Set breakpoints by clicking in the gutter next to line numbers
Use the debug toolbar to step through code, inspect variables, etc.
View the call stack, watch expressions, and other debug information in the Debug view



Important Notes

The paths in the configurations assume Quartus is installed at C:/intelFPGA/QUARTUS_Lite_V23.1. Update them if your installation is different.
The makefile shows this is for a RISC-V architecture, not the more common Nios II that some older FPGA boards use.
You might need to install the C/C++ extension for VSCode if you haven't already.
The GDB server must be running before you can connect to it from VSCode.
You may need to adjust device IDs or JTAG indices based on your specific setup.

This configuration will allow you to use VSCode's full-featured debugging interface instead of using GDB from the command line, giving you a much more intuitive debugging experience with your FPGA board.